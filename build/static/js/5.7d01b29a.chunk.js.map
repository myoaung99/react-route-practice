{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","screens/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","navigate","useNavigate","location","useLocation","console","log","quotes","ascending","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCkBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA3C,iC,iBCiDSO,EA5CG,SAACR,GAEjB,IAAMS,EAAWC,cAGXC,EAAWC,cAEjBC,QAAQC,IAAIH,GAGZ,IApBkBI,EAAQC,EAsBpBC,EAAkD,QAFnC,IAAIC,gBAAgBP,EAASQ,QAEVC,IAAI,QAGtCC,GAzBYN,EAyBcf,EAAMe,OAzBZC,EAyBoBC,EAxBvCF,EAAOO,MAAK,SAACC,EAAQC,GAC1B,OAAIR,EACKO,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MA2BxC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQuB,QAAxB,SACE,yBAAQC,QARe,WAE3BjB,EAAS,UAAYQ,EAAqB,OAAS,SAM/C,kBACQA,EAAqB,aAAe,iBAI9C,oBAAIhB,UAAWC,IAAQyB,KAAvB,SACGN,EAAaO,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVF,OAAQwB,EAAMxB,OACdD,KAAMyB,EAAMzB,MAHPyB,EAAMtB,a,wBCpCRuB,EAXO,WACpB,OACE,sBAAK7B,UAAWC,IAAQ6B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMzB,GAAG,aAAaL,UAAU,MAAhC,6B,gBCoCS+B,UA/BG,WAChB,MAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,EAAYD,OACX,CAACC,IAEW,YAAXC,EAEA,qBAAKnC,UAAU,WAAf,SACE,cAACwC,EAAA,EAAD,MAKS,UAAXL,EACK,qBAAKnC,UAAU,mBAAf,SAAmCsC,IAG7B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAItD,cAAC,EAAD,CAAW3B,OAAQsB,IAHjB,cAAC,EAAD","file":"static/js/5.7d01b29a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__MS5D0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__d-ALy\",\"sorting\":\"QuoteList_sorting__1Keih\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3GbtL\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { useEffect } from \"react\";\nimport { Fragment } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  // to navigate between pages\n  const navigate = useNavigate();\n\n  // to get url infomation\n  const location = useLocation();\n\n  console.log(location);\n\n  // js build-in class for extracting query parameter\n  const searchParams = new URLSearchParams(location.search);\n\n  const isSortingAscending = searchParams.get(\"sort\") === \"asc\";\n\n  // sort function\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const sortingChangeHandler = () => {\n    // navigate နဲ့ url ပြောင်းတိုင်း component re-evaluate ဖြစ်တယ်\n    navigate(\"?sort=\" + (isSortingAscending ? \"desc\" : \"asc\"));\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={sortingChangeHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React, { useEffect } from \"react\";\r\nimport QuoteList from \"./../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport useHttp from \"./../components/hooks/use-http\";\r\nimport { getAllQuotes } from \"./../components/lib/api\";\r\n\r\nconst DUMMY_QUOTES = [\r\n  { id: \"q1\", author: \"Myo\", text: \"Learning React is Fun!\" },\r\n  { id: \"q2\", author: \"Myo Myint Aung\", text: \"Learning React is Great!\" },\r\n];\r\n\r\nconst AllQuotes = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(getAllQuotes);\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"error\") {\r\n    return <div className=\"centered focused\">{error}</div>;\r\n  }\r\n\r\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n\r\nexport default AllQuotes;\r\n"],"sourceRoot":""}