{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","screens/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddComment","quoteId","console","log","useEffect","submitFormHandler","event","preventDefault","commentData","text","current","value","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","ShowCommentBtn","to","QuoteDetail","getSingleQuote","loadedQuote","path","element"],"mappings":"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","file":"static/js/4.533302db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3Muzp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__m8nPE\",\"loading\":\"NewCommentForm_loading__22Tv-\",\"control\":\"NewCommentForm_control__2bVTY\",\"actions\":\"NewCommentForm_actions__1CENx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3hENo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2ZxSp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__SP00s\"};","import { useRef, useEffect } from \"react\";\nimport useHttp from \"../hooks/use-http\";\nimport { addComment } from \"../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddComment, quoteId } = props;\n\n  console.log(quoteId);\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddComment();\n    }\n  }, [status, error, onAddComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n      commentData: { text: commentTextRef.current.value },\n      quoteId: quoteId,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from \"./CommentItem\";\nimport classes from \"./CommentsList.module.css\";\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllComments } from \"../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"../comments/CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const addCommentHandler = useCallback(() => {\n    setIsAddingComment(false);\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && (loadedComments || loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm onAddComment={addCommentHandler} quoteId={quoteId} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\r\nimport Comments from \"./../components/comments/Comments\";\r\nimport HighlightedQuote from \"./../components/quotes/HighlightedQuote\";\r\nimport { useParams, Routes, Route, Link } from \"react-router-dom\";\r\n\r\nimport useHttp from \"./../components/hooks/use-http\";\r\nimport { getSingleQuote } from \"./../components/lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst ShowCommentBtn = () => {\r\n  return (\r\n    <div className=\"centered\">\r\n      <Link className=\"btn--flat\" to=\"comments\">\r\n        Load Comments\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    error,\r\n    data: loadedQuote,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"error\") {\r\n    return <div className=\"centered focused\">{error}</div>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No Quote Found!</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n\r\n      <Routes>\r\n        <Route path=\"\" element={<ShowCommentBtn />} />\r\n        <Route path=\"comments\" element={<Comments />} />\r\n      </Routes>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}